@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a class="nav-link" asp-controller="Recipes" asp-action="User" asp-route-userId="" title="Manage your recipes">My recipes</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage your account">My account</a>
    </li>
    @if (User.IsInRole("admin"))
    {
        <li class="nav-item">
            <a class="nav-link" asp-controller="Users" asp-action="Index" title="Manage users and their roles">Users</a>
        </li>
    }
    <li class="nav-item">
        <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Recipes", new { area = "" })">
            <button type="submit" class="nav-link btn btn-link">Logout</button>
        </form>
    </li>
    }
else
{
    <li class="nav-item">
        <a class="nav-link" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
